@inproceedings{willis_garnishing_2018,
  address   = {New York, NY, USA},
  series    = {Scala 2018},
  title     = {Garnishing parsec with parsley},
  isbn      = {978-1-4503-5836-1},
  url       = {https://doi.org/10.1145/3241653.3241656},
  doi       = {10.1145/3241653.3241656},
  abstract  = {Parser combinators are a clean and powerful abstraction which can provide reasonably efficient means of parsing a grammar into a form which the programmer desires. They remain close to the domain of grammars whilst at the same time offering enormous flexibility. In Haskell, the Parsec library is a prime example of such a library. However, a direct translation to Scala proves to be unbearably slow. This paper describes the semantics and design of a new library, called Parsley, which retains a close resemblance to Parsec style whilst providing very competitive performance.},
  urldate   = {2024-01-22},
  booktitle = {Proceedings of the 9th {ACM} {SIGPLAN} {International} {Symposium} on {Scala}},
  publisher = {Association for Computing Machinery},
  author    = {Willis, Jamie and Wu, Nicolas},
  month     = sep,
  year      = {2018},
  keywords  = {Combinators, Domain-Specific Languages, Parsers},
  pages     = {24--34}
}

@techreport{leijen_parsec_2001,
  author   = {Leijen, Daan and Meijer, Erik},
  title    = {Parsec: Direct Style Monadic Parser Combinators for the Real World},
  year     = {2001},
  month    = {July},
  abstract = {Despite the long list of publications on parser combinators, there does not yet exist a monadic parser combinator library that is applicable in real world situations. In particular naive implementations of parser combinators are likely to suffer from space leaks and are often unable to report precise error messages in case of parse errors. The Parsec parser combinator library described in this paper, utilizes a novel implementation technique for space and time efficient parser combinators that in case of a parse error, report both the position of the error as well as all grammar productions that would have been legal at that point in the input.},
  url      = {https://www.microsoft.com/en-us/research/publication/parsec-direct-style-monadic-parser-combinators-for-the-real-world/},
  edition  = {Technical Report UU-CS-2001-35, Departement of Computer Science, Universiteit Utrecht},
  number   = {UU-CS-2001-27},
  note     = {User Modeling 2007, 11th International Conference, UM 2007, Corfu, Greece, June 25-29, 2007}
}

 @article{hutton_higher-order_1992,
  title     = {Higher-order functions for parsing},
  volume    = {2},
  issn      = {1469-7653},
  url       = {https://doi.org/10.1017/S0956796800000411},
  doi       = {10.1017/s0956796800000411},
  number    = {3},
  journal   = {Journal of Functional Programming},
  publisher = {Cambridge University Press},
  author    = {Hutton, Graham},
  year      = {1992},
  month     = jul,
  pages     = {323--343}
}

@inproceedings{willis_design_2022,
  author    = {Willis, Jamie and Wu, Nicolas},
  title     = {Design patterns for parser combinators in scala},
  year      = {2022},
  isbn      = {9781450394635},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3550198.3550427},
  doi       = {10.1145/3550198.3550427},
  abstract  = {Parser combinators provide a parsing experience that balances flexibility and abstraction with writing parsers in a style that remains close to the grammar. Parser combinators can benefit from the design patterns and structure of an object-oriented world, however, and this paper showcases the implementation and implications of various design patterns tailored at parsers in an object-oriented and functional world. In particular, features of Scala, such as implicits and path-dependent types, along with general object-oriented design help make it easy to write and maintain such parsers.},
  booktitle = {Proceedings of the Scala Symposium},
  pages     = {9--21},
  numpages  = {13},
  keywords  = {parser combinators, design patterns},
  location  = {Berlin, Germany},
  series    = {Scala '22}
}

@book{parr_antlr_2013,
  author    = {Parr, Terence},
  title     = {The Definitive ANTLR 4 Reference},
  year      = {2013},
  month     = {jan},
  isbn      = {1934356999},
  publisher = {Pragmatic Bookshelf},
  edition   = {2nd}
}
